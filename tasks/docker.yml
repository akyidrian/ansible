- name: Install docker prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - gnupg
    state: present
  become: true

- name: Ensure gpg directory exists
  file:
    path: "{{ user_home }}/.gnupg"
    state: directory
    owner: "{{ effective_user }}"
    group: "{{ effective_user }}"
    mode: 0700

- name: Initialize gpg keyring
  command: gpg --list-keys
  become_user: "{{ effective_user }}"
  become: true
  changed_when: false

- name: Download docker gpg key
  get_url:
    url: "{{ docker_download_url }}/gpg"
    dest: /tmp/{{ docker_gpg_file_name }}
    mode: 0644

- name: Perform dry-run to obtain docker gpg key
  command: gpg --dry-run --quiet --import --import-options import-show /tmp/{{ docker_gpg_file_name }}
  register: docker_gpg_import_result
  changed_when: false

- name: Confirm docker gpg fingerprint
  assert:
    that: docker_gpg_fingerprint in docker_gpg_import_result.stdout
    success_msg: "Docker gpg key is valid"
    fail_msg: "Docker gpg key is invalid"

- name: Add docker gpg key to keyring
  command: gpg --dearmor --batch --yes -o {{ docker_gpg_full_path }} /tmp/{{ docker_gpg_file_name }}
  become: true

- name: Verify docker gpg key was added to keyring
  command: gpg --no-default-keyring --keyring {{ docker_gpg_full_path }} --list-keys
  become: true
  register: docker_gpg_verify_result
  changed_when: false
  failed_when: docker_gpg_verify_result.rc != 0 or docker_gpg_verify_result.stdout == ""

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by={{ docker_gpg_full_path }}] {{ docker_download_url }} {{ ansible_distribution_release }} stable"
    filename: docker
    state: present
  become: true

- name: Install Docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  become: true

- name: Add user to docker group
  user:
    name: "{{ effective_user }}"
    groups: docker
    append: true
  become: true

- name: Restarted docker and ensure its running
  systemd:
    name: docker
    state: restarted
    enabled: true
    daemon_reload: yes
  become: true
  when: ansible_virtualization_type != "docker"
